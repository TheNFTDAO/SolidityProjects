Lesson 4:
Remix FundMe
We're going to create a crowdfunding type program called FundMe where users can pay in cryptocurrency to fund a cause.
This contract will allow the owner of the contract to withdraw the funds.
A new item we'll see in this lesson is a payable function (indicated by a red button in remix)
this allows the contract in question to be sent the native gas token of the chain you're working with is.
We'll also indicate a minimum USD amount in the contract.

When writing a contract or app lay out an outline of what each contract is supposed to do.
Study the global keywordsand functions!!!!!!!!!!!!!

Whenever we transact on the blockchain, there is always a value field and usually it is sent with 0 as the value. 

When we send ethereum to another wallet, we are actually putting the amount we're sending in the value field in a transaction

To make it so a user can send value to a contract, we need to add the payable keyword as such:

function fund() public payable {}

Contracts can hold funds just like a wallet address can.

We are going to use the msg.value global function to include a number of wei sent with the message.

along with including the function that allows eth to be sent to the contract, let's include code that requires a minimum amount of eth to be sent to the contract with the require as such. We will also include code that gives a message if the transaction is reverted:

require(msg.value > 1e18, didn't send enough eth);

This means that at a minimum, for this message to interact with the contract it must send a value of 1 ethereum. And the requires plus the comma indicate if the first portion reverts, do whatever the second portion says.

1e18= 1 eth = 1*10^18 wei

-------------------------------
Reverts:

Undo any actions that have been done previously, and sends the remaining gas back to user.

Let's add some logic in to see how reverts work:

let's add in uint256 public myValue = 1; //declared at the beginning of the contract

and
myValue = myValue + 2;//within the contract.

What this does is add 2 to the myValue variable every time this contract is successfully funded.

STUDY all the transaction fields!
-----------------==========================
Integrating chainlink price feeds:
Let's say in the contract we want users to spend a minimum of 5$ instead of 1 whole ethereum.
first we'll declare the minimumUsd value at the beginning of the contract:

uint8 minimumUsd = 5;

Then we change the require msg value to our new variable:

require(msg.value >= minimumUsd, "didn't send enough eth")

now, msg.value is in terms of eth but minimum USD is in terms of dollars.
To get the value of eth in dollars, we'll need to use a chainlink price data feed:

the next step will be to convert the amount of ethereum into it's value in dollars.

first we'll create a function to get the ethereum usd price, then get the conversion rate to compare it to the payable function above to see if the minimum 5 dollar threshold was met
Just as any other contract call, when we call the contract that coordinates the chainlink eth/usd price data feed we will need to find 2 datapoints:

function getPrice public(){
	// Eth USD price contract Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306
	
	// ABI: When we import/call a contract, the ABI is imported but that brings in a lot of extra unnecessary code. Instead we can call the latestround function in particular to grab the price data.
}
function getConversionRate public(){

}

There will be instances where code acts as just an interface, without any logic included within it as shown by the aggregatorv3interface that lives at https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/FeedRegistryInterface.sol
Think of the interface as being the remote control that has the commands, and the contract it points to (in this case the eth/usd data feed contract on sepolia) being the TV that processes and has all the components to execute the command from the remote.

If you compile the interface, it will give you the ABIs you need to interact with an address.

Next let's add a function that calls the getVersion function from the aggregator interface:

function getVersion() public view returns (uint256){
	AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306).version();
}

https://youtu.be/umepbfKp5rI?t=16733

-------------------------===============================--

Previously we imported a contract into another contract, but both contracts lived locally in remix. Let's replace the cumbersome interface code we copy pasted into the fundMe contract with something that works a little leaner.

importing external contracts:
we are using NAMED imports, because we only want to pull over exactly what we're using to save on gas!

import {AggregatorV3Interface} from "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"

Now that we've imported the particular code we need, let's create a function to pull chainlink price feed data into a smart contract:

function getPrice() public {
//Address - 
//ABI - 
AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306)}
(, int price,,,) = priceFeed.latestRoundData() //the price variable represents the price of eth in usd. We can omit the variables we don't need, but must keep the commas from them. In doing this, we are only assigning return value to the price variable, and the other variables are not assigned.
}

The chainlink price data feed returns the value of eth with 8 decimal places, but the msg.value command denominates eth in 18 decimal places. To resolve this conflict, we need to add 10 decimal places to the price value returned by chainlink:

return price * 1e10 // (price times 1 with 10 zeros.)

Price is an int256 but msg.value is a uint256. We will need to convert it via typecasting.

To make the price uint256, we'd adjust as follows:

return uint256(price * 1e10);
---------------------------------------------------------------
Now we have to convert the msg.value amount into dollars with the getConversionRate function:

function getConversionRate(uint256 ethAmount) public view return(uint256)// the function getConversionRate will take a uint256 ethAmount as input, and it's results will be returned publicly as a uint256 (result being $ price of eth) 
{
 uint256 ethPrice = getPrice();
 uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // To find the ethAmountInUsd we need to take the price of a whole eth from the chainlink data feed, multiply it by the amount of eth the user sent to the smart contract, and divide it by 1*10^18 because the value returned will have 18 decimal places and we want to eliminate those for a clean answer.
 return ethAmountInUsd;
 }
 
-------------=====================================
An important rule in solidity math is you always want to multiply before you divide, because only whole numbers work in solidity. The AI can help here.

Now that we've pulled in the real world price of eth/usd into the contract, we need to run logic that makes sure the amount being funded is greater than 5$.

To do this we'll use:

require(getConversionRate(msg.value) >= minimumUsd, "Up your money son.");

getConversionRate takes an ethAmount as input, uses the price data feed to find the value of a whole eth, then converts it to ethAmountInUsd, then checks to see if the dollar value is greater than minimumUsd. Since the value returned from getConversionRate has 18 decimal places, and we're looking for the dollar value, we need to change the math logic for minimumUsd as follows:

uint256 public minimumUsd = 5e18;//that means 5 to the 18th exponent, adding 18 decimal places to the minimum usd as well so it can be used in the contract. same as we used 1e18 earlier to add 18 decimal places to eth to find the gwei value.
-------------=========================================
Next, let's keep track of the users who sent us money in this contract:

Let's make an array of addresses called "funders" and keep track of who sends us money.

address[] public funders;

then we want to make a mapping of addresses to make it easier to figure out how much money each sender has sent:

mapping(address => uint256) public addressToAmountFunded; // associate the address of the message sender from addressToAmountFunded to a number that lets us identify which number sender it was.

then to add onto existing msg.value eth sent by each sender, we'll need to add the following:

addressToAmountFunded[msg.sender] = addressToAmountFunded[msg.sender] + msg.value; // This means we're taking the address of the message sender, looking for the array entry for that particular message sender and adding the msg.value they are funding to their existing array entry.

----------------------------------------
RECAP
Whenever we interact with a contract we need the contract and ABI

Compiling an interface lets us get the ABI we need easily, and gives us ways to interact with a contract without including all the contract logic (saves gas)

when we combine the contract address with the interface we can easily call the functions in that contract.

When working with math in solidity, decimals don't work.

you need to make sure you're using the correct number of units. gwei has 18 decimal places.

msg.sender and msg.value are known as globally available units. STUDY ALL THE GLOBALLY AVAILABLE UNITS.

---------------------------------=========================================
Lesson 4: Library
the getprice and getconversion code are cluttering our contract, so we want a way to import that functionality. A way we can do that is creating something called a library.

Look up Solidity by Example!!

Libraries are similar to contracts, but you can't declare state variables and you can't send them ether. A library is embedded into the contract if all library functions are internal. Otherwise, the library must be deployed and then linked before the contract is deployed.

using libraries can add functionality to different values.

We can make the getConversionRate function be a function of any value of type uint256. That means we can create our own custom function with any type, such as
msg.value.getConversionRate(); // We can work with getConversionRate as if msg.value is a class or object or contract that we created?

We'll start by making a new contract called priceConverter.sol which is going to be a library.

What is a library? It's similar to a contract. We don't use the .sol extension for libraries.

First we'll start by grabbing getPrice, getConversionRate and getVersion from fundme.sol and putting it into the priceConverter library
We'll also need to import the aggregatorv3interfacefrom the CL github.

Next we'll change the visibility of the functions within the priceConverter library since only our contract needs to use them and they do not need to be publicly called once they're in our contract. We only want functions within the fundMe contract to call the priceConverter library functions, we don't want people to be able to arbitrarily call those priceConverter functions in our contract.

Next we will import our priceConverter library into our fundMe contract and attach it to a variable (uint256)
You can delete the import AggregatorV3Interface line from fundMe since it will be imported to our library instead.

Add in: import {PriceConverter} from "./PriceConverter.sol"

to attach the price converter contract to the uint256 variables within our contract (to make it so we can use the priceConverter library functions on the uint256 variables within our contract), we add the following logic at the beginning of our contract:

using priceConverter for uint256;

At this point, the contract doesn't know what get conversionRate is. Make a note of why.

Next, in the fund function let's add:
msg.value.getConversionRate();

Whenever you're working with a library, the first input variable for a library is going to be the type you're using with the library. since we attached uint256 to this library, the first input is going to be a uint256
Since msg.value is a uint256, it gets passed inside getConversionRate as the first variable. So in the example:

function getConversionRate(uint256 ethAmount) internal view returns(uint256)}
//msg.value.getConversionRate();
the msg.value is going to be passed into the uint256 ethAmount.

even though the parentheses in getConversionRate are empty.

We have getPrice and getConversionRate as uint256 variables, as such they are also passed the msg.value value but since they are only viewing data and not making any actionable calls, it doesn't matter. But there may be circumstances where you want to make sure the variable type being called won't have any problems being passed the library attached to that variable! Look into this more!

in the fundMe contract, instead of using:
require(getConversionRate(msg.value) >= minimumUsd, "Up your money son.");
and msg.value.getConversionRate();
separately, we can combine the two to save gas:

delete the msg.value.getConversionRate(); line and replace getConversionRate(msg.value) with
require(msg.value.getConversionRate()

This works because we are attaching the priceConverter library to all uint256 variables within the contract, so now all uint256s have access to the getConversionRate in the priceConverter library, and since msg.value is a uint256 it can call getConversionRate and it'll pass itself (msg.value) as the first input parameter of that particular function (into the uint256 ethAmount in getConversionRate)

if we put a SECOND parameter into the getConversionRate function as follows:

function getConversionRate(uint256 ethAmount, uint256 secondParameter)...

then whatever is put into the parentheses of our NEW function (msg.value.getConversionRate(exampleSecondValuePassedThrough))

With this, we have moved a majority of the math into our own library!!

-----------------=================================================

SafeMath:
one of the most commonly used libraries in solidity was SafeMath
safemath was all over the place before version 0.8 of solidity, now it's almost completely unused.
prior to 0.8, unsigned and signed integers were unchecked. If you passed the upper limit of an integer, it would loop back to the lowest value (for example, a uint8 of 255 adding 1 to it's value would loop back to 0.)

in versions after 0.8, the contract just fails if you overflow or underflow on a variable.
you can use the unchecked keyword if you want it to loop back to 0.

the unchecked keyword makes your gas a little bit more efficient. if you're certain your function will never overflow or underflow you can use the unchecked keyword to make your gas more efficient.

-------------------------========================================

For Loop
next, let's implement our withdraw function in the fundMe contract:

When we withdraw all the money, we'll likely want to reset all the mappings back down to zero to show that the values associated to how much each user has withdrawn has reset.

to accomplish this we're going to use a for loop, which is logic that loops through a list of something or do something a repeated amount of times.

We want to get all the elements of the funders array of addresses, elements being 1,2,3,4 from the INDEXES 0,1,2,3
To do comments INSIDE of a line of solidity, you use /*comment*/
we'll accomplish this with the for keyword:

for (/* starting index, ending index, step amount */)
so for example, let's say we want it to start on the 0th index, go up to the 10th index, and go up in increments of 1. We'd use:

for (type variableName = 0, 10, 1)

so for this example, we want it to start with the funderIndex 0, we want it to go through the full length of the funders array which can vary, and we want it to go in increments of fundersIndexes + 1.

So, it would look as follows:

for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex = funderIndex + 1;)

or for a SHORTCUT to variable = variable + 1, you can use

for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++;){
//inside the curly braces, we are saying "execute everything inside these curly braces for the duration specified in the for loop.
//the final part of the for loop (the increments), means that every time we execute the logic within the curly brackets, we are going to add 1 to the funderIndex and make the next increment whatever the logic in the increment section of the for loop is, in this case whatever the current funderIndex is plus 1, until it reaches the full length of the funders array.
//to access the 0th element of the funders array, we use the following logic:
 funders[fundersIndex]; //this will return an address, since it's an array of addresses
}

We are adding in address funder = funders[funderIndex]; to reset our mapping addressToAmountFunded with the next command. we use this line to associate elements in the array back to the addresses associated with those indexes, and in the next line once the logic to find the address from a particular funder is found, we use the following logic to reset that addresses deposits to 0.
addressToAmountFunded[funder] = 0;

ask the ai the difference between funder and funders:

funders is the array type address[] declared in the contract
funder is a local variable within the withdraw function used in the context of the for loop. so funder only exists for us to temporarily map a particular element from the funders array to the address variable we need to reset the addressToAmountFunded variable back to 0 since we're withdrawing the funds associated with their address out.

//addressToAmountFunded[msg.sender] = addressToAmountFunded[msg.sender] + msg.value;
//instead of having a function like above be variable[value] = variable[value] + otherVariable, we can replace that with:
addressToAmountFunded[msg.sender] += msg.value;
//this means we are going to set addressToAmountFunded[msg.sender] to itself plus msg.value

---------------------=====================
Resetting an Array:

We still need to accomplish 2 things after these changes are made.

We need to reset the array and withdraw the funds.

we could go through a loop that resets each element in the funders array but that would be too gas intensive, so we are going to create an entirely new funders array instead.

to reset the array, we will do
funders = new address[](0);
//this means the funders variable will be deployed to a new contract with a new array called address with a starting index of 0;

To withdraw funds from the contract:
There are 3 different ways to send ether (native tokens on a chain):
Transfer: if we want to transfer the funds to whoever is calling the withdraw function we'd set:
msg.sender.transfer(address(this).balance); 
//the this keyword references the whole contract from wherein the msg.sender.transfer function is being called, basically this says "in the msg.sender.transfer function, the address of which is from this same contract in which it's being called, take the balance and send it to the payable address msg.sender (whoever sent the command). msg.sender = address, payable(msg.sender) = payable address. The transfer function is capped at 2300 gas, and if more gas is used it throws an error.

Send: bool sendSuccess = payable(msg.sender).send(address(this).balance);
require(sendSuccess, "Send failed");
The above command says: "search for a boolean value of true in the sendSuccess variable, and that variable is returned from the function from the payable(msg.sender) called send sends the balance of the native gas token from the address derived from this particular contract from which this command is being called. It is required that the bool value for sendSuccess is successful, else give the "Send failed" message on failure. Transfer automatically makes the transaction fail, but send requires us to include additional logic if the transaction fails, since it only returns a boolean success or failure value on failure. Also capped at 2300 gas, and if that fails because it cost more than that to send, it returns a boolean value saying whether or not the transfer was successful. 
Call:
payable(msg.sender).call{value: address(this).balance}("")
//one of the first lower level commands we use in our solidity code. the call function is incredibly powerful and we can use it to call virtually any function in all of ethereum without having to have the ABI. First we'll learn to use it to send the native blockchain currency. we will put any function information into the parentheses that we want to call in another contract. We use it like a transaction of it's own. The call function above actually returns 2 variables, a boolean variable called callSuccess, and a bytes variable called dataReturned. We are going to exhibit that by adjusting the contract as follows:
(bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}("")
	since call allows us to call different functions, if that function returns any values or data, we're going to save that in the dataReturned variable. since bytes objects are arrays, dataReturned needs to be stored in the memory.
	we know that this function returns 2 variables, but for the sake of the withdraw function in our fundme contract, we do not care about the bytes dataReturned since no complex data is being returned, we just want to know if we successfully withdrew the funds from the contract, so we will adjust that line as such:
(bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("")
	Because as we know, if there is a variable returned that we don't need for a particular function, we can leave an empty placeholder signified by a comma. similar to the send function, we will add logic in in case the function that is called fails to execute:
payable(msg.sender).call{value: address(this).balance}("");
require(callSuccess, "Call failed");
	
Use call as often as possible.

Let's add the call function into the fundme contract's withdraw function at this point:
payable(msg.sender).call{value: address(this).balance}("");
require(callSuccess, "Call failed");

but as it stands at this point after adding that code in, the contract is built such as anyone can withdraw the eth from the contract and we don't want that. we only want the owner of the contract to be able to withdraw.
We want to set up the contract to where whenever we deploy this contract, an owner is assigned to it and only they can call critical functions within it.

For this, we will use a constructor!

Constructor is a keyword and a special function in solidity.

Constructor() {
owner = msg.sender;
}

Since we want the withdraw function to only be called by the owner of this contract, we will first declare a global variable of owner:

address public owner;

Then we pass this variable along to our constructor function:

constructor() {
owner = msg.sender;
}

we  COULD add into the withdraw function:
SINGLE EQUAL SIGN IS "SET TO", DOUBLE EQUAL SIGN MEANS EQUALS.
require(msg.sender == owner, "Must be owner")

but we don't want to have to set require to owner for every function.

That's where MODIFIERS come in.

modifiers allow us to create a keyword we can put in the function declaration to add functionality to any function easily if the keyword is included.

We create it as such:

modifier onlyOwner() {
require(msg.sender == owner, "Sender is not owner");
 _;
}

the _; means "add whatever else you were going to do in the modified function."

then we can put the onlyOwner keyword after the visibility in the function declaration withdraw as such:

function withdraw() public onlyOwner {

This means it will execute whatever is in the modifier BEFORE any of the logic within the curly brackets of that particular function are executed.

------------------------------------======================
Advanced solidity immutable and constants:

let's modify the contract to be a little more professional:

if we have variables that only need to be set one time per contract, like minimum usd and constructor, we have tools that can make declaring them more gas efficient. there are 2 keywords in solidity that make it so particular variables can't be changed:

constant:
immutable:

We can adjust one of the declarations like minimumUsd as follows:

uint256 public constant minimumUsd = 5e18;

We add the constant and immutable keywords before the name of the variable. And in doing so, the variable doesn't have to take a storage spot in the contract so it becomes more gas efficient.

typically constant variables have a different naming convention, you'll want them in all caps with _ between words:


uint256 public constant MINIMUM_USD = 5e18;

constant variables are cheaper to view and to deploy.

Owner is another variable we only set one time. Variables that we set one time but outside of the same line where they're declared (like the constructor) we can set as immutable.
a good convention for marking immutable variables is as follows:

address public immutable i_owner;

constructor(){
owner = msg.sender;
}

In the global scope of the contract we can't declare a msg.sender, so we have to declare it as part of the deployment. there's only going to be a msg.sender when we're inside of a function, like the constructor function. the global variables are declared outside of (before) any of the logic of the functions happen.

let's go through and replace all the instances of owner with i_owner.

immutable variables have similar gas savings to constant variables.
--------------------------------==========================
Advanced Solidity Custom Errors:
as of solidity 0.8.4, there is a more gas efficient way than storing a string as a variable that is the else of a transaction failure. these are expensive and difficult to use dynamic information with. custom errors can be defined using the error statement for your reverts:

pragma solidity ^0.8.4;

error Unauthorized();

contract blahblah{
address payable owner = payable(msg.sender)

function withdraw() public {
if (msg.sender != owner)
	revert Unauthorized();
	
owner.transfer(address(this).balance);
}
}
This means if the owner is not the one who tries to withdraw the eth from the contract, the unauthorized defined custom error is displayed.

You declare the errors with the global variables. Instead of require you use if, then add the revert statement.

-------------------===========================================
Advanced solidity receive and fallback
Sometimes people will try to interact with a contract without going through the required function calls as needed.

if someone send the fundMe contract eth directly without calling the fund function, it would not make any of the logic of the fund function execute. The array of funders wouldn't be updated and the amountfunded wouldn't be mapped to that address.

there is a way to make it so if people send money directly to that contract or people try to trigger functions that do not exist to trigger code.

receive()
fallback()

if a call with no data or a plain send of ethereum to the contract is executed, then the receive() logic executes:

each contract can have one receive function without the explicit declaration of a function.

receive() external payable {
result = 1;
}

that result variable will start out as 0, but if any empty calls or simple eth sends are sent to the contract, it calls the receive function and updates the result to 1.

whenever data is sent with a transaction that is not explicitly associated with a function that matches with that calldata, solidity looks for a fallback function.

fallback() external payable {
result = 2;
}

For the fundMe contract, we can add fallback and receive functions in case someone accidentally sends the contract money:

receive() external payable {
fund();
}

fallback() external payable {
fund();
}

go over immutable and constant more with the AI.

https://youtu.be/umepbfKp5rI?t=21592

----------------------==========================

Foundry Simple Storage:

We are about to move off of remix ;(

often just getting a local environment set up can be the most difficult step in this process. Make sure you use stack exchange, and all the resources like AI available to you.

Foundry is a smart contract development framework like brownie, foundry is completely solidity based.

First install foundry on windows. you'll need to install the WSL first. https://learn.microsoft.com/en-us/windows/wsl/install

Then install with the instructions at: https://book.getfoundry.sh/

We will be using a code editor called Visual Studio Code:https://code.visualstudio.com/

-----------------------------------------

Moving to new repo after this vid:

https://youtu.be/umepbfKp5rI?t=25245