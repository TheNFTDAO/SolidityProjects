Solidity training notes.

Remix - IDE (integrated development environment)
A place where you can code, audit, compile and test your smart contracts (and eventually deploy them to main net).

Always begin by writing the spdx license identifier then the solidity version at the beginning of the contract.

Pragma solidity 0.8.19; {// stating our version

// > comment, you can input text with this that is ignored by the compiler.

using the format ^0.8.18, anything greater than that version can be used.

using >=0.8.18 <0.9.0 makes it so solidity versions between these ranges are usable for this contract.


------------------------------------------

after the solidity version, the next keyword is contract. This tells solidity the next piece of code is the name of the contract we're creating. (equivalent of a "class" in Java"

contract SimpleStorage {}
(Everything in the curly braces is considered a part of the contract simple storage.

-------------------------------------------------
Operators:
Operators allow for controlling the flow of logic in a solidity program, allowing for complex conditions and decisions to be made based on the state of variables.

Types
Solidity requires you to clearly state what kind of data each variable will hold, whether it's a simple number or something more complex. This is called being a "statically typed" language. It offers a range of basic types that you can use and mix together to create more complex types.

The solidity types are:
Bool: A true or false variable type.
Integers: signed or unsigned integers of various sizes, from (u)int8 to (u)int256. Without specifying size, defaults to 256. Make sure to use as close to the expected size as possible to reduce gas cost.
Bit Operations: Operations that directly manipulate the individual bits of a value. When performing bit operations in solidity, you're working with the binary form of numbers, flipping or combining bits in specific ways. The two's complement system helps the computer understand and work with both positive and negative numbers effectively.
address:
bytes:
string: set of words in between quotes. (a bytes object under the hood, specifically represented in text)


examples:

pragma solidity 0.8.18;

contract SimpleStorage{

bool hasFavoriteNumber = false;
uint favoriteNumber = 88;
string favoriteNumberInText = "eighty-eight";
address myAddress = 0x5BD53812ace2912278D7a9c97E23988b479FaF57;
bytes32favoriteBytes32 = "cat";

}

-----------==================-----------
https://youtu.be/umepbfKp5rI?t=9117
--------------=================---------

Functions (methods)

subsection of code that when called will execute a particular piece of the codebase.
identified by the keyword function. whatever is in the parentheses following function is what you're going to pass to your function code.

We prefix the local variables with an _ to differentiate them from state variables

if you include the view argument in a function, the contents of that function will not be allowed to change the state of any variables.

if you include the pure function, it prevents reading or changing the state of a variable.

examples:

pragma solidity 0.8.18;

contract SimpleStorage{

bool hasFavoriteNumber = false;
uint public favoriteNumber = 88;
string favoriteNumberInText = "eighty-eight";
address myAddress = 0x5BD53812ace2912278D7a9c97E23988b479FaF57;
bytes32 favoriteBytes32 = "cat";
function store(uint256 _favoriteNumber) public {
	favoriteNumber = _favoriteNumber;
	} // what this does is map the local variable _favoriteNumber to the state variable favoriteNumber when the store function is called.

function retrieve() public view returns(uint256){
	return favoriteNumber;
	}
}

-------------------------------------------------------------
Visibility
default is internal
Setting the visibility of a variable to public, that data can be called from other contracts. Visible externally and internally. Can be called from other parts of your contract or by external sources. Creates getter function for states/variables.
internal - only visible from within that function. Other contracts and people can't call on this variable. allows access in both the contract where it's declared and it's child contracts
external - only visible from external functions. (can only be assigned to functions)
private - only visible from the current contract. Can only be called from the contract in which it's declared and not it's child contracts.

------------------------------------------------------
Scope
Variables can only be viewed in the scope(curly brackets) of where it lives. you can call variables that are in the scope of a variable if it is nested within the curly brackets of it's parent function.
------------------------------------------------------
https://youtu.be/umepbfKp5rI?t=10246
------------------------------------------------------
11/15
Solidity Arrays and Structs

Array - list of values.
Arrays are structured with brackets following the variable type. Arrays are "0 indexed", so the first object is the 0th object. the second object is the first element.

Struct - a custom type of variable you create. for example, we can map the listOfFavoriteNumbers to an array of structs called Persons. When working with structs (custom types), you must define that custom type on both sides of the statement as such:
Person public myFriend = Person({variable1: value1, variable2: value2});

In the contract below, we define the list of favorite numbers in preparation to assign them to Person types. We also define the struct person, and rename FavoriteNumber to myFavoriteNumber to split it into two usable variables. We have also explicitly defined which value is mapped to which variable using the curly brackets in the person field.

example:

pragma solidity 0.8.18;

contract SimpleStorage{

bool hasFavoriteNumber = false;
uint public myFavoriteNumber = 88;
uint256 [] listOfFavoriteNumbers; // [0, 1, 2]
struct Person{
	uint256 favoriteNumber;
	string name;
}
Person public nuno = Person({favoriteNumber: 12, name: "Nuno"});
Person public laura = Person({favoriteNumber: 13, name: "Laura"});
Person public frank = Person({favoriteNumber: 69, name: "Frank"});
string favoriteNumberInText = "eighty-eight";
address myAddress = 0x5BD53812ace2912278D7a9c97E23988b479FaF57;
bytes32 favoriteBytes32 = "cat";
function store(uint256 _favoriteNumber) public {
	myFavoriteNumber = _favoriteNumber;
	} // what this does is map the local variable _favoriteNumber to the state variable favoriteNumber when the store function is called.
	
function store(uint256 _theirFavoriteNumber, _Person Person) public {
	theirFavoriteNumber = _theirfavoriteNumber;
	Person = _Person;
	} // what this does is map the local variable _theirFavoriteNumber to the state variable theirFavoriteNumber to a particular person when the store function is called.

function retrieve() public view returns(uint256){
	return myFavoriteNumber;
	}
}

To create an array of structs: 
declare type, visibility then variable name.
Person[] public listOfPeople; //Defaults to empty list []

So the contract would look like this:


pragma solidity 0.8.18;

contract SimpleStorage{

bool hasFavoriteNumber = false;
uint public myFavoriteNumber = 88;
uint256 [] listOfFavoriteNumbers; // [0, 1, 2]
struct Person{
	uint256 favoriteNumber;
	string name;
}
Person public nuno = Person({favoriteNumber: 12, name: "Nuno"});
Person public laura = Person({favoriteNumber: 13, name: "Laura"});
Person public frank = Person({favoriteNumber: 69, name: "Frank"});
Person[] public listOfPeople;
string favoriteNumberInText = "eighty-eight";
address myAddress = 0x5BD53812ace2912278D7a9c97E23988b479FaF57;
bytes32 favoriteBytes32 = "cat";
function store(uint256 _favoriteNumber) public {
	myFavoriteNumber = _favoriteNumber;
	} // what this does is map the local variable _favoriteNumber to the state variable favoriteNumber when the store function is called.
	Person[] public listOfPeople; //Defaults to empty list []

function retrieve() public view returns(uint256){
	return myFavoriteNumber;
	}
}

Now we have a view function with a "listOfPeople" title. To view the particular person, in this example, you need to input the uint related to the index of that person to see the info related to them.

if we put a range in the array "Person[3]", it is a static array that can only have that many objects
leaving the array undefined makes it a dynamic array. "Person[]"

Below we create a function that will let us create people and update the listOfPeople array. It will take 2 variables as input. The name of the person we're adding and their favorite number. We are going to use the push function to push a new entry into this array.

function addPerson(string memory _name, uint256 _favoriteNumber) public{
	listOfPeople.push(Person(_favoriteNumber, _name) ) // Solidity sees the nested command to create a new person entry for the array inside of the parentheses, then takes that newly created person entry and uses the push entry outside of the parentheses to actually push it into the array.
}

------------------------------------------------------------
Memory, storage and calldata intro:
There are 6 places where you can store and access data in solidity:

Stack -
Memory -
Storage -
Calldata -
Code -
Logs -

Calldata and Memory mean the variable you are defining will only exist temporarily (for the duration of the function call). if you call addPerson(blah blah blah), the variables in the parentheses only exist until the addperson function is finished.

Inside of functions, most variables default to memory variables.

Difference between memory and calldata is that a memory variable can be changed and manipulated.
if you pass a calldata variable, they are temporary variables that can not be modified.
Storage is permanent variables that can be modified.

If you create a variable outside of a function inside of a contract, it automatically gets stored as a storage variable.
Solidity can usually sus out what kind of storage is needed for a particular variable, for instance if a variable is being called within a function it will know that it is probably not a storage variable.

--------------------------------------
Basic Solidity Mappings:
A mapping is like a dictionary, where a set of keys is associated with particular data and when that key is called, the data associated with it is also called.

created as follows:

mapping(string => uint256) public nameToFavoriteNumber;
//The function mapping takes a string and ties it to a uint256, is publicly visible and is called nameToFavoriteNumber

After this is added to the code, you will be able to search a favorite number by the string name as opposed to going through the whole index.

It would make sense then, to add the mapping when the initial new person is created:

pragma solidity 0.8.18;

contract SimpleStorage{

bool hasFavoriteNumber = false;
uint public myFavoriteNumber = 88;
uint256 [] listOfFavoriteNumbers; // [0, 1, 2]
struct Person{
	uint256 favoriteNumber;
	string name;
}
Person public nuno = Person({favoriteNumber: 12, name: "Nuno"});
Person public laura = Person({favoriteNumber: 13, name: "Laura"});
Person public frank = Person({favoriteNumber: 69, name: "Frank"});
Person[] public listOfPeople; //Defaults to empty list []
string favoriteNumberInText = "eighty-eight";
address myAddress = 0x5BD53812ace2912278D7a9c97E23988b479FaF57;
bytes32 favoriteBytes32 = "cat";
function store(uint256 _favoriteNumber) public {
	myFavoriteNumber = _favoriteNumber;
	} // what this does is map the local variable _favoriteNumber to the state variable favoriteNumber when the store function is called.

mapping(string => uint256) public nameToFavoriteNumber;
//The function mapping takes a string and ties it to a uint256, is publicly visible and is called nameToFavoriteNumber

function addPerson(string memory _name, uint256 _favoriteNumber) public{
listOfPeople.push(Person(_favoriteNumber, _name) ); // Solidity sees the nested command to create a new person entry for the array inside of the parentheses, then takes that newly created person entry and uses the push entry outside of the parentheses to actually push it into the array.
nameToFavoriteNumber[_name] = _favoriteNumber; // What this line doing is declaring that in the mapping above, when a person is created their favorite number is mapped to their name to easily find it.
}
function retrieve() public view returns(uint256){
	return myFavoriteNumber;
	}
}

---------------------------------------------------------------

https://sepolia.etherscan.io/tx/0xb8d4c5651bbaecc5c74861b1b9aef4c4fce143f1adf158395ec154f15223727a

https://youtu.be/umepbfKp5rI?t=12592

---------------------------------------------------------------
===============================================================
DAY 2
===============================================================
---------------------------------------------------------------
Remix Storage Factory:
In this lesson, we're working with 3 new contracts.

The original simplestorage.sol, addfivestorage.sol, storagefactory.sol

You can include the entirety of another contract within another contract if you need to reference it, like so:

// SPDX-License-Identifier MIT
pragma solidity 0.8.18;

contract SimpleStorage{

bool hasFavoriteNumber = false;
uint public myFavoriteNumber = 88;
uint256 [] listOfFavoriteNumbers; // [0, 1, 2]
struct Person{
	uint256 favoriteNumber;
	string name;
}
Person public nuno = Person({favoriteNumber: 12, name: "Nuno"});
Person public laura = Person({favoriteNumber: 13, name: "Laura"});
Person public frank = Person({favoriteNumber: 69, name: "Frank"});
Person[] public listOfPeople; //Defaults to empty list []
string favoriteNumberInText = "eighty-eight";
address myAddress = 0x5BD53812ace2912278D7a9c97E23988b479FaF57;
bytes32 favoriteBytes32 = "cat";
function store(uint256 _favoriteNumber) public {
	myFavoriteNumber = _favoriteNumber;
	} // what this does is map the local variable _favoriteNumber to the state variable favoriteNumber when the store function is called.

mapping(string => uint256) public nameToFavoriteNumber;
//The function mapping takes a string and ties it to a uint256, is publicly visible and is called nameToFavoriteNumber

function addPerson(string memory _name, uint256 _favoriteNumber) public{
listOfPeople.push(Person(_favoriteNumber, _name) ); // Solidity sees the nested command to create a new person entry for the array inside of the parentheses, then takes that newly created person entry and uses the push entry outside of the parentheses to actually push it into the array.
nameToFavoriteNumber[_name] = _favoriteNumber; // What this line doing is declaring that in the mapping above, when a person is created their favorite number is mapped to their name to easily find it.
}
function retrieve() public view returns(uint256){
	return myFavoriteNumber;
	}
}
contract storageFactory{

	function createSimpleStorageContract() public {
	
	}

}


This isn't a best practice because it is gas intensive and confusing.

when you see the format:

SimpleStorage public simpleStorage;

The SimpleStorage on the left is the name of the contract, and the simpleStorage on the right is the name of the variable. If this is confusing, you can rename the variable

We are going to add the new keyword as a parameter in the createSimpleStorageContract to let solidity know that it is deploying a new contract when we call this function. Formatted as follows:

contract storageFactory{

    SimpleStorage public mySimpleStorage;

	function createSimpleStorageContract() public {
        mySimpleStorage = new SimpleStorage();
	}

}

Instead of including the whole other contract in our new solidity file, we can import the other contract into simplestorage.sol as follows:

// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

import "./SimpleStorage.sol";

contract storageFactory{

    SimpleStorage public mySimpleStorage;

	function createSimpleStorageContract() public {
        mySimpleStorage = new SimpleStorage();
	}

}

That is the same as copy pasting the simple storage contract into this new storage factory contract.
When working with multiple files you need to keep the version of solidity in mind.

We NEVER want to default to the regular import shown above.
you can specify the contract from the target file using
import {SimpleStorage, SimpleStorage2} from "./SimpleStorage.sol";

Use AI to explain contracts and notes

To keep track of all of the different simpleStorage contracts created from the storageFactory, let's turn it into an array!

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "./simpleStorage.sol";

contract storageFactory{

    simpleStorage[] public listOfSimpleStorageContracts; //This signifies that there will be an Array of SimpleStorage contracts deployed.

	function createSimpleStorageContract() public {
        simpleStorage newSimpleStorageContract = new simpleStorage();
		listOfSimpleStorageContracts.push(newSimpleStorageContract);
	}

}

https://youtu.be/umepbfKp5rI?t=13960 https://www.myinstants.com/en/instant/fnaf-6-am/
----------------------------------=======================================

Day 3:

What adding the listOfSimpleStorageContracts lets us do is track the array of simple storage contracts deployed by their index number.

we can think of the storage factory as a manager for the contracts within. Next we'll call other functions from the simple storage contract the storage factory contract deploys from within the storage factory contract.

we'll add the following function:

function sfStore(uint256 _simpleStorageIndex, uint256 _newSimpleStorageNumber) public {
	// Address
	// ABI

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "./simpleStorage.sol"; //This line imports the simpleStorage contract from a file named simpleStorage.sol. This indicates that storageFactory will use functionalities defined in the simpleStorage contract.

contract storageFactory{

    simpleStorage[] public listOfSimpleStorageContracts; //This signifies that there will be an Array of SimpleStorage contracts deployed.

	function createSimpleStorageContract() public {
        simpleStorage newSimpleStorageContract = new simpleStorage();
		listOfSimpleStorageContracts.push(newSimpleStorageContract);
	}
	function sfStore(uint256 _simpleStorageIndex, uint256 _newSimpleStorageNumber) public {
	// Address
	// ABI
	simpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex]; //what this line says is in the simpleStorage contract, let the mySimpleStorage function get the array of simple storage contracts generated in the listOfSimpleStorageContracts. the array _simpleStorageIndex is being wrapped in the SimpleStorage contract. Now we can call the store function directly from this contract with the following:
	mySimpleStorage.store(_NewSimpleStorageNumber);
	}
	//now we need a function that will let us get(read) data from the new variable mySimpleStorage that we just created. we can get it with the following function. 
	function sfGet(uint256 _simpleStorageIndex) public view returns(uint256){
	SimpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex);
	return mySimpleStorage.retrieve();
}

}

To interact with a contract from within another smart contract you'll need 2 things, a contract address and the ABI for that function. (technically you only need the function selector and not the ABI but we'll touch on that later)
ABI = Application Binary Interface

The compiler knows what the ABI is automatically because the compiler generates the ABI.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Day 4

Using the AI to describe and analyze the storageFactory contract above.
A new contract named "storageFactory" is defined. Then a public array of "simpleStorage" contracts is declared. The array stores instances of the "simpleStorage" contracts that this smart contract creates.
The function "createSimpleStorageContract" creates a new instance of "simpleStorage" and adds it to the "listOfSimpleStorageContracts" array.
then, "sfStore" retrieves a specific "simpleStorage" contract instance from the array using the "_simpleStorageIndex", then calls the "store" function of the "simpleStorage" contract to store "_newSimpleStorageNumber".
then "sfGet" retrieves a specific "simpleStorage" instance, then calls the "retrieve" function of the "simpleStorage" contract and returns the result (the contract address from the array of contract addresses.

I intend to use the AI to add 2 functions to the contract and explain to me how and why the new functions work. I want a string associated with each newly deployed simpleStorage contract from the storage factory that is it's name, and I want to add a uint256 variable associated with each contract that is it's "ID"
I asked the ai to add the first request to the code and it provided the following:

pragma solidity ^0.8.18;

import "./simpleStorage.sol";

contract storageFactory {
    simpleStorage[] public listOfSimpleStorageContracts;

    function createSimpleStorageContract() public {
        simpleStorage newSimpleStorageContract = new simpleStorage();
        listOfSimpleStorageContracts.push(newSimpleStorageContract);
    }

    function sfStore(uint256 _simpleStorageIndex, uint256 _newSimpleStorageNumber) public {
        simpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex];
        mySimpleStorage.store(_newSimpleStorageNumber);
    }

    function sfStoreString(uint256 _simpleStorageIndex, string memory _newString) public {
        simpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex];
        mySimpleStorage.storeString(_newString);
    }

    function sfGet(uint256 _simpleStorageIndex) public view returns(uint256) {
        simpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex];
        return mySimpleStorage.retrieve();
    }

    function sfGetString(uint256 _simpleStorageIndex) public view returns(string memory) {
        simpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex];
        return mySimpleStorage.retrieveString();
    }
}


Then when I tried compiling it gave the error:

from solidity:
TypeError: Member "storeString" not found or not visible after argument-dependent lookup in contract simpleStorage.
  --> storageFactory.sol:20:9:
   |
20 |         mySimpleStorage.storeString(_newString);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

this is because the storeString function is NOT in the simpleStorage contract. Adding that in now:
Adding this:
function storeString(string _storeString){
	storeString = _storeString;
	}

to simpleStorage.

I forgot to declare the myStoredString variable earlier in the contract with:
string public myStoredString;

Adding that in. Also needed to add in a function that retrieves that myStoredString value:

    // New function to retrieve the stored string
    function retrieveString() public view returns (string memory) {
        return myStoredString;
    }

Next I am adding in a way to declare a uint256 value mapped to ID, add an ID to a simpleStorage deployed contract, then retrieve the value associated with it.

First I'll add

     function sfStoreID(uint256 _simpleStorageIndex, uint256 _id) public {
        simpleStorage mySimpleStorage = listOfSimpleStorageContracts[_simpleStorageIndex];
        mySimpleStorage.storeID(_id);
    }

CONTINUE DEBUGGING TOMORROW!
https://youtu.be/umepbfKp5rI?t=14266
-----------------------------------------------------------------------------------------------
Day 5

Tried compiling the code and got the following error on storageFactory.sol:

from solidity:
TypeError: Wrong argument count for function call: 0 arguments given but expected 1.
  --> StorageFactory.sol:35:10:
   |
35 | 		return mySimpleStorage.retrieveuint256();
   | 		       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

from solidity:
TypeError: Different number of arguments in return statement than in returns declaration.
  --> StorageFactory.sol:35:3:
   |
35 | 		return mySimpleStorage.retrieveuint256();
   | 		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
I had to make sure to define the retrieveuint256() function in the SimpleStorage.sol contract first, 